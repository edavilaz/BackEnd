@inject ICarritoServicio carritoServicio
@implements IDisposable

@inject SweetAlertService Swal
@inject NavigationManager navManager
@using BackEnd.Blazor.Extensiones
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider autenticacionProvider;


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BackEnd.Blazor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        
        @* Acá se autoriza por el rol el Administrador podrá acceder a algunos u el Cliente a otros *@

        <AuthorizeView Roles="Administrador">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard">
                    <span class="oi oi-dashboard mx-3" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="usuarios">
                    <span class="oi oi-person mx-3" aria-hidden="true"></span> Usuarios
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="categorias">
                    <span class="oi oi-document mx-3" aria-hidden="true"></span> Categorías
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="productos">
                    <span class="oi oi-project mx-3" aria-hidden="true"></span> Productos
                </NavLink>
            </div>
        </AuthorizeView>

        @* Este link a tienda queda libre, es decir que lo vera cualquiera *@
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="catalogo">
                <span class="oi oi-briefcase mx-3" aria-hidden="true"></span> Tienda
            </NavLink>
        </div>
        

        @* Acá tenemos el correo del usuario logueado *@
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="navbar-text mx-3" aria-hidden="true">
                            
                            @context.User.Claims.Where(c => c.Type == ClaimTypes.Email).Select(c => c.Value).SingleOrDefault()
                                                        
                        </span>
                    </NavLink>
                </div>


            </Authorized>

        </AuthorizeView>


        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/cart">
                <span class="badge bg-warning text-white rounded-pill mx-3">@MostrarCantidadCarrito()</span>
                Cart
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link">
                        <button class="oi oi-power-standby mx-3 btn btn-danger" @onclick="CerrarSesion">Salir</button>
                    </NavLink>
                </div>

            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/login">
                        <span class="oi oi-account-login mx-3"></span>Iniciar Sesión
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        carritoServicio.MostrarItems += StateHasChanged;
    }

    public void Dispose()
    {
        carritoServicio.MostrarItems -= StateHasChanged;
    }

    private int MostrarCantidadCarrito()
    {
        return carritoServicio.CantidadProductos();
    }
    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Desea Salir?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No",

            });

        if (result.IsConfirmed)
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            navManager.NavigateTo("/", true);
        }
    }

}
